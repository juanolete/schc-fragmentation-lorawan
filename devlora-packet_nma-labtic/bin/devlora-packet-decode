#!/usr/bin/env node

"use strict";

/**
 * Command-line interface to packet decoding
 *
 * Usage:
 *   devlora-packet-decode --hex <packet>
 *   devlora-packet-decode --base64 <packet>
 */

//var rl = require('../../');

//const readline = require('readline');
/*
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});
*/
var lora_packet = require('../lib/devindex.js');

var cmdlineArgs = process.argv;

var hexOption = cmdlineArgs.indexOf("--hex");
var b64Option = cmdlineArgs.indexOf("--base64");
var inputData;
if (hexOption != -1 && hexOption+1 <  cmdlineArgs.length) {
    var arg = cmdlineArgs[hexOption+1];
    console.log("decoding from Hex: ", arg);
    inputData = new Buffer(arg, 'hex');
} else if (b64Option != -1 && b64Option+1 <  cmdlineArgs.length) {
        var arg = cmdlineArgs[b64Option+1];
        console.log("decoding from Base64: ", arg);
        inputData = new Buffer(arg, 'base64');
} else {
    console.log ("Usage:");
    console.log ("\tdevlora-packet-decode --hex <data>");
    console.log ("\tdevlora-packet-decode --base64 <data>");
    process.exit(1);
}

var packet = lora_packet.fromWire(inputData);
//console.log ("Decoded packet")
//console.log ("--------------")
//console.log (packet.toString());

var appskey;
var nwkskey;

appskey = "C33185D81CDDA55AFE1D8EEA86880548";
nwkskey = "0390C56E5AE428B841E41ACFA5F6D165";

/*
rl.question('Enter AppSKey in hex format', (inappskey) => { // inappskey is string
  
  appskey = inappskey.toUpperCase()
  console.log(`AppSKey is: ${appskey}`);
  //console.log(`AppSKey is: ${inappskey}`);

  rl.question('Enter NwkSKey in hex format\n', (innwkskey) => {	// innwkskey is string

    nwkskey = innwkskey.toUpperCase()
    console.log(`NwkSKey is: ${nwkskey}`);
    //console.log(`NwkSKey is: ${innwkskey}\n`);

    rl.close();
  
//var taip = typeof inappskey;

//console.log("Fuera de rl\n");
//console.log("Testing: AppSKey = " + appskey);
//console.log("Testing: NwkSKey = " + nwkskey);
//console.log("Testing: type inappskey = " + taip)

var AppSKey = new Buffer(appskey, 'hex');
var NwkSKey = new Buffer(nwkskey, 'hex');

var plaintextpayload = lora_packet.decrypt(packet, AppSKey, NwkSKey);

console.log("Plaintext payload is: " + plaintextpayload.toString('hex').toUpperCase());

    });

}); */

var AppSKey = new Buffer(appskey, 'hex');
var NwkSKey = new Buffer(nwkskey, 'hex');

var plaintextpayload = lora_packet.decrypt(packet, AppSKey, NwkSKey);

console.log(/*"Plaintext payload is: " + */plaintextpayload.toString('hex').toUpperCase());

